<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chitharanjan&#39;s Blog</title>
    <link>http://cdax.github.io/</link>
    <description>Recent content on Chitharanjan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Mar 2015 20:53:15 +0530</lastBuildDate>
    <atom:link href="http://cdax.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>(Solution to) Prison Break: A Simple Counting Problem</title>
      <link>http://cdax.github.io/post/prison-break-sol/</link>
      <pubDate>Sun, 08 Mar 2015 20:53:15 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/prison-break-sol/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Imagine a prison having 36 cells arranged like the squares in a 6-by-6 grid. All adjacent cells have doors between them; doors that you can open. You, the prisoner in the top-left corner cell, are told that you can have your freedom if you can find your way to the diagonally opposite corner cell, after passing through each other cell exactly once.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://cdax.github.io/img/prison-break.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Can you figure such a way out of the prison?&lt;/p&gt;

&lt;h4 id=&#34;the-solution&#34;&gt;The Solution&lt;/h4&gt;

&lt;p&gt;With counting problems, as with most real-life problems, it makes a lot of sense to take a step back and think hard about the feasibility of a solution before actually setting out to discover possible solutions or to count them. Is it even possible for you, the prisoner, to escape by getting to the diagonally opposite corner cell after crossing each other cell exactly once?&lt;/p&gt;

&lt;p&gt;Having solved similar problems before, you decide to colour the map like a chessboard – for ease of making logical deductions. Since adjacent cells have doors between them, you can imagine yourself navigating the chessboard-prison exactly the way &lt;a href=&#34;http://en.wikipedia.org/wiki/Pawn_%28chess%29&#34;&gt;a pawn&lt;/a&gt; would.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://cdax.github.io/img/prison-break-sol.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It’s easy to see that a pawn-move from one cell to an adjacent cell will always be a move from a white square to a black square, or vice-versa. This means that you’ll require an even number of pawn-moves (at least two) to get from a square of one colour, to another square of the same colour.&lt;/p&gt;

&lt;p&gt;How many moves will you be making if you must pass through each cell exactly once? The answer is &lt;strong&gt;35&lt;/strong&gt;, since 35 other prison cells need to be entered exactly once, with one pawn-move per cell. &lt;em&gt;No cell may be entered more than once.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I hope you can see by now that you’ve been had, that you’ve been at the receiving end of the prison warden’s cruel joke. &lt;em&gt;Because diagonally opposite corner cells will always be the same colour,&lt;/em&gt; and you can never get from one to the other in an odd number (35) of pawn-moves.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>If Arundhati Roy wrote JavaScript</title>
      <link>http://cdax.github.io/post/if-roy-wrote-js/</link>
      <pubDate>Fri, 27 Feb 2015 20:33:49 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/if-roy-wrote-js/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://anguscroll.com/&#34;&gt;Angus Croll’s&lt;/a&gt; &lt;a href=&#34;http://www.amazon.com/Hemingway-Wrote-JavaScript-Angus-Croll/dp/1593275854/ref=sr_1_1?ie=UTF8&amp;amp;qid=1425017264&amp;amp;sr=8-1&amp;amp;keywords=if+hemingway+wrote+javascript&#34;&gt;If Hemingway Wrote JavaScript&lt;/a&gt; is a beautifully illustrated book full of code snippets that are rich in their use of fundamental JavaScript abstractions and modern programming patterns. Born out of equal love for both literature and JavaScript, this book is a whirlwind tour through imaginary GitHub repos belonging to some of the most celebrated wordsmiths of our time, from Shakespeare to JD Salinger to Tupac, including of course Ernest Hemingway.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://cdax.github.io/img/thirteen_authors_2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cdas.svbtle.com/if-arundhati-roy-wrote-javascript&#34;&gt;No Starch Press&lt;/a&gt; has been publishing many thoroughly readable programming books over the years, including the much-acclaimed &lt;a href=&#34;http://www.amazon.com/Eloquent-JavaScript-Modern-Introduction-Programming/dp/1593275846/ref=sr_1_1?ie=UTF8&amp;amp;qid=1425017353&amp;amp;sr=8-1&amp;amp;keywords=eloquent+javascript&#34;&gt;Eloquent JavaScript&lt;/a&gt; and &lt;a href=&#34;http://www.amazon.com/Learn-Some-Erlang-Great-Good/dp/1593274351/ref=sr_1_1?ie=UTF8&amp;amp;qid=1425017394&amp;amp;sr=8-1&amp;amp;keywords=learn+you+some+erlang+for+great+good&#34;&gt;Learn You Some Erlang for Great Good!&lt;/a&gt; Although If Hemingway has a far more leisurely style than the other books, it is by no means a lesser spectacle of code craftsmanship. Reading some of the examples requires (or, like in my case, inspires) a proper understanding of scoping, hoisting, and closures among other ideas.&lt;/p&gt;

&lt;h4 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h4&gt;

&lt;p&gt;In this post, I’ll introduce a few basic JavaScript abstractions with help from one of Angus’s snippets, taken from the chapter on Arundhati Roy. The challenge is to create a chainable function that takes one string(word) per function call, but when called without an argument, returns a list of all previously passed-in words. e.g., the function sayIt() will be used thus:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sayIt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;world!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;…resulting in the following:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Hello world!
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;arundhati-roy-s-javascript-solution&#34;&gt;Arundhati Roy’s JavaScript solution&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The plot of The God of Small Things is non-linear. So is Roy’s JavaScript code. - Angus Croll&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here it is in all its glory, reproduced with permission from Angus and No Starch:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// 1) Start with the answer. 2) Move on to the Grubby Details.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// A viable try-able plan.&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sayIt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TheSayItSaveItThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Does Whatever-it-is-you-need-it-to.&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// Loyal, Dependable, Weak-kneed.&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TheSayItSaveItThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// When invoked it Saves.&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;KochuFunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// When addressed it Says.&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;TheSayItSaveItThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TheStretchableFetchableThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// Then it waits to be re-summoned.&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// Not invoking. Not recursing. Just waiting.&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TheSayItSaveItThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Why change KochuFunction when KochuFunction can change itself?&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;KochuFunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;TheStretchableFetchableThing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;KochuFunction&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #a6e22e&#34;&gt;TheStretchableFetchableThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;push&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// KochuFunction is no longer what it was.&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// Or thought it&amp;#39;d be. Ever.&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Roy’s debut JavaScript function, received with almost the same fanfare as her debut novel.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are more than a couple of things going on here.&lt;/p&gt;

&lt;h4 id=&#34;scoping&#34;&gt;Scoping&lt;/h4&gt;

&lt;p&gt;For months, JavaScript’s scoping rules remained a source of confusion for me thanks to the C-style syntax and constructs. I finally had my moment of clarity after coming across an excellent blogpost on the subject. One major takeaway from that post is that names in JavaScript have function-level scope as opposed to the C family’s block-level scope. What this means is that in C++ (for example) the if and while blocks have their own scopes, isolated from all external scopes while in JavaScript, scope isolation exists only for functions, not blocks. The following is an illustrated example:&lt;/p&gt;

&lt;p&gt;In C++:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// Prints 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In JavaScript:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// This if-block has no scope of its own, and as a result...&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// ...&amp;#39;a&amp;#39; still references the variable declared two lines above&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// Prints 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The story of &lt;code&gt;sayIt()&lt;/code&gt; revolves around three main characters. The functions &lt;code&gt;TheSayItSaveItThing()&lt;/code&gt; and &lt;code&gt;KochuFunction()&lt;/code&gt;, and the list &lt;code&gt;TheStretchableFetchableThing&lt;/code&gt;. Let’s take a closer look and identify the scope of each.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayIt()&lt;/code&gt; works by maintaining an ordered list of all the passed-in arguments. This list, &lt;code&gt;TheStretchableFetchableThing&lt;/code&gt; is never formally declared as a var. The interpreter will therefore assign it to the topmost(global) scope.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TheSayItSaveItThing()&lt;/code&gt; and &lt;code&gt;KochuFunction()&lt;/code&gt; on the other hand are declared as functions inside &lt;code&gt;sayIt()&lt;/code&gt;, and are therefore assigned to &lt;code&gt;sayIt()&lt;/code&gt;’s function-level scope.&lt;/p&gt;

&lt;h4 id=&#34;hoisting&#34;&gt;Hoisting&lt;/h4&gt;

&lt;p&gt;The outermost function, &lt;code&gt;sayIt()&lt;/code&gt; has a return statement sitting neatly on top of all other lines of code. Hoisting is the process by which JavaScript pulls all var and function declarations to the top of their respective scopes. Hoisting is what is responsible for ensuring that &lt;code&gt;TheSayItSaveItThing()&lt;/code&gt; and &lt;code&gt;KochuFunction()&lt;/code&gt; are defined before that return statement is executed.&lt;/p&gt;

&lt;p&gt;As opposed to how we see the code, here is how the interpreter sees it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sayIt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// KochuFunction()&amp;#39;s definition has been hoisted&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;KochuFunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;TheStretchableFetchableThing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;KochuFunction&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #a6e22e&#34;&gt;TheStretchableFetchableThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;push&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// TheSayItSaveItThing()&amp;#39;s definition has also been hoisted&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TheSayItSaveItThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;KochuFunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;TheSayItSaveItThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TheStretchableFetchableThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TheSayItSaveItThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TheSayItSaveItThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;closures&#34;&gt;Closures&lt;/h4&gt;

&lt;p&gt;In JavaScript, a closure is created when a function accesses a name that was declared in an external scope. Or in other words, a closure is an inner function accessing variables that were declared outside its own function-level scope.&lt;/p&gt;

&lt;p&gt;In the program above, for example, both &lt;code&gt;TheSayItSaveItThing()&lt;/code&gt; and &lt;code&gt;KochuFunction()&lt;/code&gt; are closures, accessing the global TheStretchableFetchableThing. Additionally, &lt;code&gt;TheSayItSaveItThing()&lt;/code&gt; also accesses &lt;code&gt;KochuFunction()&lt;/code&gt;. Closures are a very powerful JavaScript feature, as best explained &lt;a href=&#34;http://c2.com/cgi/wiki?ClosuresAndObjectsAreEquivalent&amp;amp;utm_content=buffer7063c&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;the-russian-doll&#34;&gt;‘The Russian Doll’&lt;/h4&gt;

&lt;p&gt;The power of scoping, hoisting and closures is revealed in the definition and subsequent re-definition of &lt;code&gt;KochuFunction()&lt;/code&gt; in the code above. The first call to &lt;code&gt;KochuFunction()&lt;/code&gt; seeds a new list with the passed-in argument, and then changes its own definition, so that subsequent calls will simply keep pushing to this list.&lt;/p&gt;

&lt;p&gt;Angus Croll calls this &lt;a href=&#34;https://javascriptweblog.wordpress.com/2010/04/27/the-russian-doll-principle-re-writing%C2%A0functions%C2%A0at%C2%A0runtime/&#34;&gt;the Russian Doll pattern&lt;/a&gt;. Peter Michaux calls this &lt;a href=&#34;http://michaux.ca/articles/lazy-function-definition-pattern&#34;&gt;the lazy function definition pattern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://cdax.github.io/img/matryoshka.JPG&#34; alt=&#34;A Russian Matryoshka doll&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Often I’ve found myself writing functions that must do something one way the first time, and then a different way the next time. My own inelegant solution has always looked something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;firstCall&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;firstCall&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// do something&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;firstCall&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// do something else&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, with this approach, each function call has an associated branching cost. The if statement needs to be checked for all the calls, even though the result will be the same every time except the first. The Russian Doll pattern eliminates this unnecessary cost by changing the function’s definition after the first invocation!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// KochuFunction()&amp;#39;s definition has been hoisted&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;KochuFunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;TheStretchableFetchableThing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// KochuFunction redefines itself inside its own body, like a Matryoshka doll&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;KochuFunction&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;TheStretchableFetchableThing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;push&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;word&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If Hemingway wrote JavaScript has been a fascinating read so far, and I highly recommend it to admirers of JavaScript everywhere, the same way I’d recommend The God of Small Things to admirers of English literature.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prison Break: A Simple Counting Problem</title>
      <link>http://cdax.github.io/post/prison-break/</link>
      <pubDate>Fri, 20 Feb 2015 20:50:11 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/prison-break/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Imagine a prison having 36 cells arranged like the squares in a 6-by-6 grid. All adjacent cells have doors between them; doors that you can open. You, the prisoner in the top-left corner cell, are told that you can have your freedom if you can find your way to the diagonally opposite corner cell, after passing through each other cell exactly once.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://cdax.github.io/img/prison-break.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Can you figure such a way out of the prison?&lt;/p&gt;

&lt;p&gt;If this seems to be taking you an embarrassingly long time, feel free to [click here for the solution]()&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MongoDB: Selecting Documents at Random</title>
      <link>http://cdax.github.io/post/mongodb-select-random-docs/</link>
      <pubDate>Sun, 28 Dec 2014 13:01:57 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/mongodb-select-random-docs/</guid>
      <description>

&lt;h4 id=&#34;the-problem&#34;&gt;The Problem&lt;/h4&gt;

&lt;p&gt;While implementing the back-end for &lt;a href=&#34;http://math-bin.herokuapp.com/&#34;&gt;Mathbin&lt;/a&gt;, I wanted an API endpoint that would return a random document from a Mongo collection. A very naive way of approaching this would be to select all documents and then picking the document at a random index in the returned array.&lt;/p&gt;

&lt;p&gt;Now, I don&amp;rsquo;t expect Mathbin&amp;rsquo;s database to hit big numbers anytime soon, but this really got me thinking about how this problem could be solved efficiently for collections having millions, maybe billions of documents.&lt;/p&gt;

&lt;h4 id=&#34;the-solution&#34;&gt;The Solution&lt;/h4&gt;

&lt;p&gt;There&amp;rsquo;s a nice solution that makes retrieval very efficient at the price of some extra storage. The idea is to associate a random value with each document while inserting it into the collection. This can be achieved in Mongoose using a numeric field with a default value of &lt;code&gt;Math.random()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Later, during retrieval, a simple filter gets the job done:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;randomDoc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Collection&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;gte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Math.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;random&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;a-better-solution&#34;&gt;A Better Solution&lt;/h4&gt;

&lt;p&gt;The problem with the solution above is that if the collection has very few documents, there&amp;rsquo;s a very good chance that the filter might return no document at all. &lt;em&gt;What are the odds that the random value generated in the query will be less than at least one document?&lt;/em&gt; Not very good when the number of documents is too little. So how do we make this better?&lt;/p&gt;

&lt;p&gt;If the &lt;em&gt;greater-than-or-equals&lt;/em&gt; query fails, simply flip it around:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//Uses Mongoose promises to pass values from one async call to the next  &lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;pivot&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Math.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;random&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;  
&lt;span style=&#34;color: #a6e22e&#34;&gt;Collection&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;gte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pvt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;  
&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;then&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;snippet&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;//If the gte filter returned nothing, try an lt filter!&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;snippet&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Collection&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;lt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pvt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;snippet&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;then&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;snippet&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;//At this point, snippet contains a random document from the collection.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we&amp;rsquo;re set! The only way this could fail now is if the Collection is empty to begin with &amp;ndash; an easy edge case to handle. Let me know what you think in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Underscore Magic!</title>
      <link>http://cdax.github.io/post/underscore-magic/</link>
      <pubDate>Fri, 26 Dec 2014 13:42:48 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/underscore-magic/</guid>
      <description>

&lt;p&gt;Front-end developers should know &lt;a href=&#34;http://underscorejs.org/&#34;&gt;Underscore.js&lt;/a&gt; like the backs of their hands. It brings jQuery&amp;rsquo;s philosophy of &lt;em&gt;Write less, do more&lt;/em&gt; to the area of array/object manipulation. It&amp;rsquo;s almost like a shim for some really useful functions that JavaScript should be supporting natively. No wonder then, that it finds itself listed as a dependency by many popular client-and server-side projects like &lt;em&gt;Backbone.js&lt;/em&gt; and &lt;em&gt;Ghost&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://cdax.github.io/img/underscore.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this post, I&amp;rsquo;m going to talk about three cool ways in which I&amp;rsquo;ve seen Underscore (or its cousin &lt;a href=&#34;http://lodash.com/&#34;&gt;Lo-Dash&lt;/a&gt;) put to use.&lt;/p&gt;

&lt;h4 id=&#34;working-with-request-parameters&#34;&gt;Working with Request Parameters&lt;/h4&gt;

&lt;p&gt;I noticed these tricks while going through the source of &lt;em&gt;Ghost&lt;/em&gt;. Ghost server has a number of API endpoints, each with a set of blacklisted/whitelisted request parameters. So what happens when someone tries to meddle with the API calls made by the client-side app? Something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//pick() returns a copy of the object, filtered to only have values for the whitelisted keys (or array of valid keys)  &lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pick&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;whitelistedParams&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;hellip;or this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//omit() returns a copy of the object, filtered to omit the blacklisted keys (or array of keys)  &lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;omit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;blacklistedParams&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, in order to normalize/standardize a request by adding in default values for required parameters, simply do:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//defaults() fills in undefined properties in object with the first value present in the following list of defaults objects  &lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;defaults&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;defaultRequest&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;chaining&#34;&gt;Chaining&lt;/h4&gt;

&lt;p&gt;When &lt;code&gt;chain()&lt;/code&gt; is called on an array/object, Underscore attaches its own methods to it, returning a &lt;em&gt;wrapped object&lt;/em&gt;. The beauty of &lt;code&gt;chain()&lt;/code&gt; is that the following two lines of code become equivalent:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//Imperative style  &lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pick&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;whitelistedParams&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;  
&lt;span style=&#34;color: #75715e&#34;&gt;//Functional style&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;chain&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;  
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pick&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;whitelistedParams&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The call to &lt;code&gt;value()&lt;/code&gt; at the end strips off underscore methods from the wrapped object returned by the previous method in the chain. Here&amp;rsquo;s another example of this &lt;em&gt;functional&lt;/em&gt; way of writing JavaScript:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;chain&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;  
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;keys&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;templating&#34;&gt;Templating&lt;/h4&gt;

&lt;p&gt;Underscore also comes with an inbuilt templating method that parses and populates Embedded JS templates, taking values from a passed-in object. In fact, this is a fairly common pattern in Backbone.js:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//Defining the template  &lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;viewTemplate&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;  
                    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;p&amp;gt;Hi! I&amp;#39;m &amp;lt;%= firstName %&amp;gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; and I&amp;#39;m &amp;lt;%= age %&amp;gt; &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;% if(age === 1) { %&amp;gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;
                        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;year&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;% } else { %&amp;gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;
                        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;years&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;% } %&amp;gt; old.&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;//Populating the template&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.view&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;viewTemplate&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;({&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;firstName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Chitharanjan&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;lastName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Das&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;24&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;read-the-docs&#34;&gt;Read the Docs!&lt;/h4&gt;

&lt;p&gt;Underscore can be used to achieve a lot more fancy-ness than can be put into a couple of blogposts. To find out more, head on over to &lt;a href=&#34;http://underscorejs.org/&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript&#39;s &#34;void&#34; operator</title>
      <link>http://cdax.github.io/post/void-0/</link>
      <pubDate>Thu, 25 Dec 2014 13:53:53 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/void-0/</guid>
      <description>

&lt;p&gt;Being a relative newcomer to JavaScript, I figured a good way to learn the community&amp;rsquo;s best practices would be to spend some time looking under the hood of popular open-source projects that I use. Lately I&amp;rsquo;ve been working with the excellent and lightweight &lt;em&gt;Backbone.js&lt;/em&gt;, so I thought its &lt;a href=&#34;http://backbonejs.org/docs/backbone.html&#34;&gt;annotated source&lt;/a&gt; would be the perfect place to start.&lt;/p&gt;

&lt;p&gt;After ten minutes of reading, I was staring at this puzzling snippet of code on my screen, which at first glance seems to be a check for &lt;code&gt;null&lt;/code&gt;/&lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;parse&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;parse&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;the-plot-thickens&#34;&gt;The Plot Thickens&lt;/h4&gt;

&lt;p&gt;To my eyes, void 0 looked like an open invitation to learn another bit of JavaScript trivia. I was on to &lt;a href=&#34;http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void&#34;&gt;MDN&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/7452341/what-does-void-0-mean&#34;&gt;Stack Overflow&lt;/a&gt; in a flash.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what MDN&amp;rsquo;s got to say about &lt;code&gt;void&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;void&lt;/code&gt; operator evaluates the given expression and then returns &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Aha!&lt;/em&gt; So that line above was indeed a check for &lt;code&gt;undefined&lt;/code&gt;. Try it out! Open up your browser&amp;rsquo;s console and type in the following&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;  
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello, world.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;  
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;hellip;to see your browser say &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;But wait, what about all those other ways of checking whether a variable is undefined. How is &lt;code&gt;x === void 0&lt;/code&gt; better than any of those? What about &lt;code&gt;x === undefined&lt;/code&gt; or &lt;code&gt;typeof x === &amp;quot;undefined&amp;quot;&lt;/code&gt;?&lt;/p&gt;

&lt;h4 id=&#34;undefined-is-just-another-variable&#34;&gt;&lt;code&gt;undefined&lt;/code&gt; is just another variable&lt;/h4&gt;

&lt;p&gt;My most surprising learning from this was that &lt;code&gt;undefined&lt;/code&gt; (in some old browsers) is just another global variable that can be overridden. If you&amp;rsquo;re using any of these old browsers, try this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;alert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Not undefined&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a world where &lt;code&gt;undefined&lt;/code&gt; is mutable and could easily be overridden by you or any of your dependencies, &lt;code&gt;x === undefined&lt;/code&gt; is not a reliable check. &lt;code&gt;typeof x === &amp;quot;undefined&amp;quot;&lt;/code&gt; still remains a pretty solid candidate, however. For more JavaScript gotchas like the mutability of undefined, head on over to &lt;a href=&#34;http://wtf.js/&#34;&gt;wtf.js&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Binary Indexed Trees</title>
      <link>http://cdax.github.io/post/binary-indexed-trees/</link>
      <pubDate>Thu, 27 Nov 2014 13:28:06 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/binary-indexed-trees/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A problem that seems difficult may have a simple, unexpected solution.&amp;rdquo; Unlike the advanced methods, the aha! insights of algorithms don&amp;rsquo;t come only after extensive study; they&amp;rsquo;re available to any programmer willing to think seriously before, during and after coding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Jon Bentley (quoting Martin Gardner), in the column Aha! Algorithms from his book Programming Pearls&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;the-origin-of-bits&#34;&gt;The Origin of BITs&lt;/h4&gt;

&lt;p&gt;The Binary Indexed Tree is hands down the most elegant data structure that I&amp;rsquo;ve had the pleasure of studying. It offers an embarrassingly simple yet highly efficient solution to the problem of maintaining cumulative object frequencies.&lt;/p&gt;

&lt;p&gt;Imagine you&amp;rsquo;re supposed to keep track of the number of times each symbol appears in a long string, knowing the complete universe of possible symbols (or the &lt;em&gt;symbol alphabet&lt;/em&gt;). Two operations are key - &lt;code&gt;UPDATE&lt;/code&gt; the frequency of a symbol as it is read from the string, and &lt;code&gt;QUERY&lt;/code&gt; the frequency of a symbol at any given time.&lt;/p&gt;

&lt;p&gt;A third kind of operation becomes important when a meaningful order can be imposed on the symbol alphabet, like say if the alphabet was a list of numbers that can be sorted. Here, it might be useful to track the cumulative frequency or &lt;code&gt;COUNT&lt;/code&gt; of symbols less than a given symbol &lt;em&gt;x&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The Binary Indexed Tree solves each of the &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;QUERY&lt;/code&gt; and &lt;code&gt;COUNT&lt;/code&gt; problems in O(M) time, and using O(n) space where n is the cardinality of the symbol alphabet, and M is just the number of set bits (1s) in n&amp;rsquo;s binary representation!&lt;/p&gt;

&lt;p&gt;BITs were first described in a 1994 paper titled &lt;a href=&#34;http://pdf.aminer.org/001/073/976/a_new_data_structure_for_cumulative_frequency_tables.pdf&#34;&gt;A New Data Structure for Cumulative Frequency Tables&lt;/a&gt; by Peter Fenwick, and are also known by their eponymous name, Fenwick Trees.&lt;/p&gt;

&lt;h4 id=&#34;the-aha-insight&#34;&gt;The Aha! Insight&lt;/h4&gt;

&lt;p&gt;The unexpected search technique used by BITs can be better understood by drawing parallels with the way many people learn how to convert from binary to decimal notation. We use the following lookup table:&lt;/p&gt;

&lt;table&gt;  
    &lt;tbody&gt;&lt;tr&gt;
        &lt;th&gt;&lt;strong&gt;Bit position, i&lt;/strong&gt;&lt;/th&gt;
        &lt;td&gt;0&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;...&lt;/td&gt;
        &lt;td&gt;n&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th&gt;&lt;strong&gt;Value, v&lt;sub&gt;i&lt;/sub&gt;&lt;/strong&gt;&lt;/th&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;...&lt;/td&gt;
        &lt;td&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;and the decimal representation is simply the sum of the values related with the positions of the set bits. For 13, for example:&lt;/p&gt;

&lt;p&gt;13 = (1101)&lt;sub&gt;2&lt;/sub&gt; = v&lt;sub&gt;3&lt;/sub&gt; + v&lt;sub&gt;2&lt;/sub&gt; + v&lt;sub&gt;0&lt;/sub&gt; = 8 + 4 + 1&lt;/p&gt;

&lt;p&gt;The Fenwick Tree is an array analogous to the lookup table above, where each of the array elements si, is a carefully computed partial frequency sum (a sub-frequency). If fi is the actual frequency of the ith element, and r is the position of the least significant bit in i (for example, r1 = 0, r2 = 1, r3 = 0, and so on), then&lt;/p&gt;

&lt;p&gt;s&lt;sub&gt;i&lt;/sub&gt; = f&lt;sub&gt;i - 2&lt;sup&gt;r&lt;/sup&gt; + 1&lt;/sub&gt; + f&lt;sub&gt;i - 2&lt;sup&gt;r&lt;/sup&gt; + 2&lt;/sub&gt; + ... + f&lt;sub&gt;i&lt;/sub&gt;&lt;/p&gt;

&lt;h4 id=&#34;three-key-observations&#34;&gt;Three key observations&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note that the element frequencies that make up s&lt;sub&gt;i&lt;/sub&gt; and s&lt;sub&gt;i - 2&lt;sup&gt;r&lt;/sup&gt;&lt;/sub&gt; are disjoint sets.&lt;/li&gt;
&lt;li&gt;Note also, that s&lt;sub&gt;0&lt;/sub&gt; = f&lt;sub&gt;0&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Finally, note that any frequency f&lt;sub&gt;j&lt;/sub&gt; appears in each of the sums s&lt;sub&gt;i&lt;/sub&gt; where j ≥ i - 2&lt;sup&gt;r&lt;/sup&gt; + 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Talking in terms of bits, i - 2&lt;sup&gt;r&lt;/sup&gt; can be computed by stripping away the least significant bit from i. For more on bit-twiddling, take a look at this &lt;a href=&#34;https://graphics.stanford.edu/~seander/bithacks.html&#34;&gt;useful reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;implementing-count-and-query&#34;&gt;Implementing &lt;code&gt;COUNT&lt;/code&gt; and &lt;code&gt;QUERY&lt;/code&gt;&lt;/h4&gt;

&lt;h5 id=&#34;count&#34;&gt;&lt;code&gt;COUNT&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;The cumulative frequency up until the ith element, COUNT&lt;sub&gt;i&lt;/sub&gt; is defined as the sum of the actual frequencies of all elements less than or equal to the ith. COUNT&lt;sub&gt;i&lt;/sub&gt; can be calculated from the Fenwick Tree by observing that:&lt;/p&gt;

&lt;p&gt;COUNT&lt;sub&gt;i&lt;/sub&gt; &lt;br&gt;
= f&lt;sub&gt;0&lt;/sub&gt; + ... + f&lt;sub&gt;i - 1&lt;/sub&gt; + f&lt;sub&gt;i&lt;/sub&gt;&lt;br&gt;
= f&lt;sub&gt;0&lt;/sub&gt; + ... + f&lt;sub&gt;i - 2&lt;sup&gt;r&lt;/sup&gt; - 1&lt;/sub&gt; + f&lt;sub&gt;i - 2&lt;sup&gt;r&lt;/sup&gt;&lt;/sub&gt; + (f&lt;sub&gt;i - 2&lt;sup&gt;r&lt;/sup&gt; + 1&lt;/sub&gt; + f&lt;sub&gt;i - 2&lt;sup&gt;r&lt;/sup&gt; + 2&lt;/sub&gt; + ... + f&lt;sub&gt;i&lt;/sub&gt;)&lt;br&gt;
= s&lt;sub&gt;0&lt;/sub&gt; + ... + s&lt;sub&gt;i - 2&lt;sup&gt;r&lt;/sup&gt;&lt;/sub&gt; + s&lt;sub&gt;i&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;In order to compute COUNT&lt;sub&gt;i&lt;/sub&gt;, we start with the sub-frequency at index i and at every step add a new sub-frequency after stripping away i&amp;rsquo;s least significant bit. This continues till i runs out of set bits, i.e., till i becomes equal to zero. For example,&lt;/p&gt;

&lt;p&gt;COUNT&lt;sub&gt;13&lt;/sub&gt; = s&lt;sub&gt;13&lt;/sub&gt; + s&lt;sub&gt;12&lt;/sub&gt; + s&lt;sub&gt;8&lt;/sub&gt; + s&lt;sub&gt;0&lt;/sub&gt;&lt;/p&gt;

&lt;h5 id=&#34;query&#34;&gt;&lt;code&gt;QUERY&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Retrieving the actual frequency of the element at index &lt;em&gt;i&lt;/em&gt; is as simple as calculating COUNT&lt;sub&gt;i&lt;/sub&gt; and COUNT&lt;sub&gt;i - 1&lt;/sub&gt; and computing the difference. Both &lt;code&gt;QUERY&lt;/code&gt; and &lt;code&gt;COUNT&lt;/code&gt; are thus equally efficient.&lt;/p&gt;

&lt;p&gt;Never forget that &lt;code&gt;QUERY&lt;/code&gt; can be made even faster by identifying the longest common suffix in the binary representations for &lt;em&gt;i&lt;/em&gt; and &lt;em&gt;i - 1&lt;/em&gt;. (How does this help?)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS for Print Media</title>
      <link>http://cdax.github.io/post/css-for-print-media/</link>
      <pubDate>Tue, 25 Nov 2014 14:06:28 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/css-for-print-media/</guid>
      <description>

&lt;p&gt;I never really felt it was important to style web pages for the print medium till a few days ago when I was formatting my résumé. The theme that I&amp;rsquo;ve forked to use on this blog employs &lt;code&gt;font-kerning&lt;/code&gt; and &lt;code&gt;anti-aliasing&lt;/code&gt; to make my posts look like text on paper. This made me curious to see what my resume would look like if printed.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Print Preview&lt;/em&gt; was embarrassing. The text was huge and there were gaps everywhere. Paragraphs were getting split between pages in all the wrong places. What was more, the page count stood at 6 A4 pages because of the oversized text. Much has been written about the importance of brevity when it comes to job applications. What if a prospective employer wanted to take a printout for their records, and then had their printer spew out pages after pages of poorly formatted text?&lt;/p&gt;

&lt;p&gt;I decided to spend some time collecting best practices from all over the web. This blogpost is a choice collection of the essential ideas that one needs to know in order to write CSS for the printer.&lt;/p&gt;

&lt;h4 id=&#34;media-queries-to-the-rescue&#34;&gt;Media Queries to the Rescue&lt;/h4&gt;

&lt;p&gt;Media queries have traditionally been used for making websites responsive &amp;ndash; to make sure your content looks good on the most common screen sizes. But, as the name suggests, they can be used to query not just screen sizes, but just about any detail about the medium. For example, you can add print styles in the following two ways:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!--Styles for screens--&amp;gt;&lt;/span&gt;  
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;screen.css&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
...
&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!--Styles for printers--&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;media&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print.css&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;hellip;or, right inside screen.css, like so:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;@media&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(print)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color: #75715e&#34;&gt;/*Styles for printers go in here*/&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Media queries can be used to achieve many more details, like whether the printer is monochrome or color. I encourage you to read more about them on &lt;a href=&#34;http://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries&#34;&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what exactly does one need to keep in mind while writing printer styles?&lt;/p&gt;

&lt;h4 id=&#34;drop-the-headers-footers-and-backgrounds&#34;&gt;Drop the Headers, Footers and Backgrounds&lt;/h4&gt;

&lt;p&gt;When a reader prints out your blogpost, they probably don&amp;rsquo;t want any of the navigation, search boxes, or other header elements. Likewise, sitemaps and other links that go into your footer aren&amp;rsquo;t usually required. The same background color that makes your website look nice might be superfluous when it comes to printing on a monochrome printer. Therefore, you&amp;rsquo;ll likely need to add the following to &lt;code&gt;print.css&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;header,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;footer&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;none;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;white;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;bring-out-the-page-breaks&#34;&gt;Bring out the Page-breaks&lt;/h4&gt;

&lt;p&gt;In most situations, you don&amp;rsquo;t want page-breaks to be inserted into your content arbitrarily. To control where your content is split across pages, you can use the &lt;code&gt;page-break-before&lt;/code&gt; and &lt;code&gt;page-break-after&lt;/code&gt; properties, like so:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;...  
&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- inserts a page-break here --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;page-break&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;.page-break&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;block;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;page-break-before&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;always;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These properties support a bunch of useful options, like &lt;code&gt;avoid&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;. Read more about them &lt;a href=&#34;http://developer.mozilla.org/en-US/docs/Web/CSS/page-break-after&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;the-ideal-font-size&#34;&gt;The Ideal font-size&lt;/h4&gt;

&lt;p&gt;Failing to land at the perfect px number after many trials, I finally resorted to A List Apart for some help. They have a great article explaining their print stylesheet, and the author suggests the use of a point-size instead of a pixel-size:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;12pt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;links&#34;&gt;Links&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s face it &amp;ndash; hyperlinks are mostly useless when it comes to the print medium. However, keep in mind that as long as they&amp;rsquo;re important (and short) enough, your readers might actually be willing to make the effort to type them into a browser. So just make sure all of the links you &lt;em&gt;really&lt;/em&gt; want your readers to see, are displayed on paper. For example,&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/resume&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Résumé&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print-only&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;(www.blog.me/resume)&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;span&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your stylesheet would then look like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;.print-only&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;none;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;@media&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(print)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;.print-only&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;inline;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h4&gt;

&lt;p&gt;For more on writing print stylesheets, you can check out this &lt;a href=&#34;http://alistapart.com/article/goingtoprint&#34;&gt;fantastic article at A List Apart&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Coffee Can Problem</title>
      <link>http://cdax.github.io/post/coffee-can/</link>
      <pubDate>Fri, 31 Oct 2014 14:16:01 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/coffee-can/</guid>
      <description>

&lt;h4 id=&#34;the-problem&#34;&gt;The Problem&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Imagine you&amp;rsquo;ve got a can full of coffee beans &amp;ndash; some are black and the rest are white. Outside of this can, you&amp;rsquo;ve also got yourself a large reservoir of black coffee beans. You keep picking out beans from your can, two at a time. If both the beans you picked are the same colour, you&amp;rsquo;ve got to throw both of them away and add to the can with a black bean from your stockpile. On the other hand, if the beans are different colours, you&amp;rsquo;ve got to throw the black bean away and restore the white one to the can. Keep repeating this till you&amp;rsquo;re left with exactly one bean.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;em&gt;Coffee Can Problem&lt;/em&gt; is two-fold. First, you&amp;rsquo;ve got to prove that this series of experiments &lt;sub&gt;will&lt;/sub&gt; terminate with exactly one bean left in the can. And second, you need to determine the colour of the last remaining bean given the respective numbers of black and white beans that you started out with (say b&lt;sub&gt;1&lt;/sub&gt; and w&lt;sub&gt;1&lt;/sub&gt;).&lt;/p&gt;

&lt;h4 id=&#34;the-solution&#34;&gt;The Solution&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s say that just before the i-th pick, you&amp;rsquo;re left with exactly b&lt;sub&gt;i&lt;/sub&gt; black beans and w&lt;sub&gt;i&lt;/sub&gt; white beans inside the can. The i-th pick can have one of three possible outcomes:&lt;/p&gt;

&lt;h5 id=&#34;outcome-i-both-the-beans-you-picked-were-black&#34;&gt;Outcome I: Both the beans you picked were BLACK&lt;/h5&gt;

&lt;p&gt;If this happens, then after throwing away both beans and replacing them with one black bean from your pile, you&amp;rsquo;re left with b&lt;sub&gt;i&lt;/sub&gt; - 1 black beans and w&lt;sub&gt;i&lt;/sub&gt; white beans.&lt;/p&gt;

&lt;h5 id=&#34;outcome-ii-both-the-beans-you-picked-were-white&#34;&gt;Outcome II: Both the beans you picked were WHITE&lt;/h5&gt;

&lt;p&gt;In this situation, you&amp;rsquo;ve got to throw away the two white beans and replace them with a black bean. So that you&amp;rsquo;re left with b&lt;sub&gt;i&lt;/sub&gt; + 1 black beans and w&lt;sub&gt;i&lt;/sub&gt; - 2 white beans.&lt;/p&gt;

&lt;h5 id=&#34;outcome-iii-the-beans-you-picked-were-different-colours&#34;&gt;Outcome III: The beans you picked were different colours&lt;/h5&gt;

&lt;p&gt;In this last scenario, you&amp;rsquo;ll be throwing away the black bean and putting the white one back in the can, so that you&amp;rsquo;ve got yourself b&lt;sub&gt;i&lt;/sub&gt; - 1 black beans and w&lt;sub&gt;i&lt;/sub&gt; white beans, just like &lt;em&gt;Outcome I&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Two observations are key:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No matter what the outcome, the total number of beans in the can will &lt;em&gt;always&lt;/em&gt; come down by one.&lt;/li&gt;
&lt;li&gt;The number of white beans in the can will either stay the same, or drop by two, or in other words, white beans always leave the can two at a time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the first observation, it directly follows that you&amp;rsquo;ll always finish with exactly one bean in the can (because each pick takes a bean away from the total).&lt;/p&gt;

&lt;p&gt;And putting both observations together, it is easy to see that you&amp;rsquo;ll run out of white beans if and only if you had an even number of white beans to begin with. &lt;em&gt;It doesn&amp;rsquo;t matter how many black beans you had in the can at any point of time.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;thinking-about-corner-cases&#34;&gt;Thinking about Corner Cases&lt;/h4&gt;

&lt;p&gt;The reasoning above assumes that at least one pick will always be made, so a corner case occurs when you only get one bean to begin with. &lt;em&gt;Does our solution still hold?&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;takeaways-and-source&#34;&gt;Takeaways and Source&lt;/h4&gt;

&lt;p&gt;My biggest learning from this problem was about the existence of white coffee beans. Apparently, it&amp;rsquo;s an under-roasted variety that results in a lighter-than-usual brew.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Coffee Can Problem&lt;/em&gt; originally appeared in David Gries&amp;rsquo;s &lt;em&gt;Science of Programming&lt;/em&gt;, though I found it among the exercise problems in Jon Bentley&amp;rsquo;s &lt;em&gt;Programming Pearls&lt;/em&gt; (Ch. 4 - Writing Correct Programs).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fast Modular Exponentiation</title>
      <link>http://cdax.github.io/post/fast-modular-exponentiation/</link>
      <pubDate>Mon, 06 Oct 2014 14:45:24 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/fast-modular-exponentiation/</guid>
      <description>

&lt;h4 id=&#34;the-problem&#34;&gt;The Problem&lt;/h4&gt;

&lt;p&gt;&amp;hellip; is to compute &lt;em&gt;b&lt;sup&gt;e&lt;/sup&gt; (mod m)&lt;/em&gt;, where &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;e&lt;/em&gt;, and &lt;em&gt;m&lt;/em&gt; are positive integers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;e.g.,&lt;/em&gt; for &lt;em&gt;b = 2&lt;/em&gt;, &lt;em&gt;e = 109&lt;/em&gt; and &lt;em&gt;m = 10&lt;sup&gt;9&lt;/sup&gt; + 7&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;b&lt;sup&gt;e&lt;/sup&gt; (mod m) = 140625001&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;a-naive-solution&#34;&gt;A Naive Solution&lt;/h4&gt;

&lt;p&gt;&amp;hellip; would be one that first computes &lt;em&gt;b&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt; and then computes its remainder &lt;em&gt;mod m&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Speaking in terms of the basic arithmetic operations, this method would require &lt;em&gt;O(e)&lt;/em&gt; multiplications, and a lot of space to store the computed value of &lt;em&gt;b&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Consider the example given above where &lt;em&gt;b&lt;/em&gt; is 2 and &lt;em&gt;e&lt;/em&gt; is 10&lt;sup&gt;9&lt;/sup&gt;. Storing the computed value of &lt;em&gt;b&lt;sup&gt;e&lt;/sup&gt;&lt;/em&gt; in this case will require (10&lt;sup&gt;9&lt;/sup&gt; + 1) bits! Clearly, such a solution will not cut it with large values of &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;e&lt;/em&gt; and &lt;em&gt;m&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;improving-the-space-bound&#34;&gt;Improving the space bound&lt;/h4&gt;

&lt;p&gt;The costly &lt;em&gt;O(log&lt;sub&gt;2&lt;/sub&gt; b&lt;sup&gt;e&lt;/sup&gt;)&lt;/em&gt; bound on space can be improved significantly if, instead of computing the remainder at the end, we compute remainders after each multiplication, using the property&lt;/p&gt;

&lt;p&gt;&lt;em&gt;{ p × q } (mod r) = [ p × { q (mod r) } ] (mod r)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Plugging in values for &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;e&lt;/em&gt; and &lt;em&gt;m&lt;/em&gt; from the example above, we begin multiplying as follows:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;b (mod m) = 2 (mod m) = 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;b&lt;sup&gt;2&lt;/sup&gt; (mod m) = [ b × { b (mod m) } ] (mod m) = [ 2 × 2 ] (mod m) = 4&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;b&lt;sup&gt;3&lt;/sup&gt; (mod m) = [ b × { b&lt;sup&gt;2&lt;/sup&gt; (mod m) } ] (mod m) = [ 2 × 4 ] (mod m) = 8&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip;and so on, till&lt;/p&gt;

&lt;p&gt;&lt;em&gt;b&lt;sup&gt;e&lt;/sup&gt; (mod m) = [ b × { b&lt;sup&gt;e - 1&lt;/sup&gt; (mod m) } ] (mod m)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This solution runs in &lt;em&gt;O(e)&lt;/em&gt; time, using &lt;em&gt;O(log&lt;sub&gt;2&lt;/sub&gt; (b × m))&lt;/em&gt; space. The space improvement is significant for large values of &lt;em&gt;e&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a sketch for a recursive function based on the algorithm above, taken from a Wikipedia article:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function modular_pow(b, e, m)  
    c := 1
    for e_prime = 1 to e
        c := (c * b) mod m
    return c
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;improving-the-time-bound&#34;&gt;Improving the time bound&lt;/h4&gt;

&lt;p&gt;Now that we&amp;rsquo;ve sufficiently improved the worst-case space bound, let&amp;rsquo;s do something about the &lt;em&gt;O(e)&lt;/em&gt; time bound, which can be troublesome for large values of &lt;em&gt;e&lt;/em&gt;. Consider the binary representation for the exponent &lt;em&gt;e&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;e = ( a&lt;sub&gt;0&lt;/sub&gt; × 2&lt;sup&gt;0&lt;/sup&gt; ) + ( a&lt;sub&gt;1&lt;/sub&gt; × 2&lt;sup&gt;1&lt;/sup&gt; ) + &amp;hellip; + ( a&lt;sub&gt;n&lt;/sub&gt; × 2&lt;sup&gt;n&lt;/sup&gt;  )&lt;/em&gt;, where &lt;em&gt;n = log&lt;sub&gt;2&lt;/sub&gt; e&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thus,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;b&lt;sup&gt;e&lt;/sup&gt; (mod m) = b&lt;sup&gt;( a&lt;sub&gt;0&lt;/sub&gt; × 2&lt;sup&gt;0&lt;/sup&gt; ) + ( a&lt;sub&gt;1&lt;/sub&gt; × 2&lt;sup&gt;1&lt;/sup&gt; ) + &amp;hellip; + ( a&lt;sub&gt;n&lt;/sub&gt; × 2&lt;sup&gt;n&lt;/sup&gt;  )&lt;/sup&gt; (mod m)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;b&lt;sup&gt;e&lt;/sup&gt; (mod m) = { b&lt;sup&gt;( a&lt;sub&gt;0&lt;/sub&gt; × 2&lt;sup&gt;0&lt;/sup&gt; )&lt;/sup&gt; (mod m) } × { b&lt;sup&gt;( a&lt;sub&gt;1&lt;/sub&gt; × 2&lt;sup&gt;1&lt;/sup&gt; )&lt;/sup&gt; (mod m) } × &amp;hellip; × { b&lt;sup&gt;( a&lt;sub&gt;n&lt;/sub&gt; × 2&lt;sup&gt;n&lt;/sup&gt; )&lt;/sup&gt; (mod m) }&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;b&lt;sup&gt;e&lt;/sup&gt; (mod m) = { (b&lt;sup&gt;2&lt;sup&gt;0&lt;/sup&gt;&lt;/sup&gt; )&lt;sup&gt;a&lt;sub&gt;0&lt;/sub&gt;&lt;/sup&gt; (mod m) } × { (b&lt;sup&gt;2&lt;sup&gt;1&lt;/sup&gt;&lt;/sup&gt; )&lt;sup&gt;a&lt;sub&gt;1&lt;/sub&gt;&lt;/sup&gt; (mod m) } × &amp;hellip; × { (b&lt;sup&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/sup&gt; )&lt;sup&gt;a&lt;sub&gt;n&lt;/sub&gt;&lt;/sup&gt; (mod m) }&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this point, two observations are key:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When &lt;em&gt;a&lt;sub&gt;i&lt;/sub&gt; = 0&lt;/em&gt;, the term &lt;em&gt;{ (b&lt;sup&gt;2&lt;sup&gt;i&lt;/sup&gt;&lt;/sup&gt;)&lt;sup&gt;a&lt;sub&gt;i&lt;/sub&gt;&lt;/sup&gt; (mod m) }&lt;/em&gt; reduces to 1&lt;/li&gt;
&lt;li&gt;When &lt;em&gt;a&lt;sub&gt;i&lt;/sub&gt; = 1&lt;/em&gt;, the same term becomes equal to &lt;em&gt;b&lt;sup&gt;2&lt;sup&gt;i&lt;/sup&gt;&lt;/sup&gt; (mod m)&lt;/em&gt;, which can be computed iteratively as &lt;em&gt;{ b&lt;sup&gt;2&lt;/sup&gt; (mod m) × b&lt;sup&gt;2&lt;sup&gt;(i - 1)&lt;/sup&gt;&lt;/sup&gt; (mod m) } (mod m)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This leaves us with a fast and space-efficient algorithm running in only &lt;em&gt;O(log&lt;sub&gt;2&lt;/sub&gt; e)&lt;/em&gt; time and requiring only &lt;em&gt;O(log&lt;sub&gt;2&lt;/sub&gt; (b × m))&lt;/em&gt; space. Here&amp;rsquo;s a sketch of the complete algorithm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function modular_pow(b, e, m)  
    result := 1
    b := b mod m
    while e &amp;gt; 0
        if (e mod 2 == 1):
           result := (result * b) mod m
        e := e &amp;gt;&amp;gt; 1
        b := (b * b) mod m
    return result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Why is the National Emergency of 1975 seen as one of the most controversial times in the History of India?</title>
      <link>http://cdax.github.io/post/1975-emergency/</link>
      <pubDate>Sun, 29 Jun 2014 00:41:34 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/1975-emergency/</guid>
      <description>&lt;p&gt;&lt;em&gt;This was originally posted as an answer to the question &lt;a href=&#34;https://www.quora.com/History/Why-is-the-National-Emergency-of-1975-seen-as-one-of-the-most-controversial-times-in-the-History-of-India&#34;&gt;Why is the National Emergency of 1975 seen as one of the most controversial times in the History of India?&lt;/a&gt; on &lt;a href=&#34;https://www.quora.com/&#34;&gt;Quora&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I&amp;rsquo;ll begin with your first question, &lt;strong&gt;the reasons&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There were two important developments leading up to the 1975 emergency, that can be credited with its imposition [1].&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The first of these, the JP Movement, initiated by students in Bihar and later lead by veteran political leader Jayaprakash Narayan (JP) was targeted against growing misgovernance and corruption under the Congress regime. JP&amp;rsquo;s call to &amp;lsquo;Total Revolution&amp;rsquo; [2], addressed to his predominantly youth following generated tremendous popular enthusiasm and pushed Indira Gandhi into a corner. The laurels of the 1971 Indo-Pakistan war were far behind her now.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The second, more immediate cause, was a ruling by the Allahabad High Court on 12 June, 1975 that effectively rendered her election to Parliament, null and void. She had been found guilty on 2 out of 14 counts of election malpractices leveled against her by Raj Narain, who had lost the Rae Bareilly seat to her in the said election.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the days that followed, the pressure to resign began to mount on Indira Gandhi from many quarters, even from within her own party. In an unexpected reaction, she decided to have the President Fakhruddin Ali Ahmed sign and approve an ordinance declaring a state of internal emergency with effect from the midnight of 25 June, 1975.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The answer to your second question, regarding the procedure, is a little more complicated. Back in those days, the Constitutional procedure and requirements for imposing an emergency were very different from what they are now. This is because once the emergency was uplifted and a new government was elected to the Centre in 1977, no time was wasted in amending the very provisions that had made it astonishingly simple for Indira Gandhi to impose and sustain a state of emergency since 1975. [3] For example,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is no longer possible to declare an emergency on grounds of &amp;lsquo;internal disturbance&amp;rsquo; as it was in 1975. This term was replaced with the much more specific &amp;lsquo;armed rebellion&amp;rsquo; by an amendment in 1978.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;According to this same amendment, the cabinet&amp;rsquo;s approval is now required before an emergency can be declared by the President. In 1975, Indira Gandhi acted swiftly to get the President&amp;rsquo;s approval and chose to inform her cabinet the next morning.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A declaration of emergency was, prior to the 1978 amendment, immune to judicial review. Simply put, such a declaration could not be contested in a court of law!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In 1975, an emergency, once approved by Parliament, could be extended for as long as the cabinet deemed necessary. The 1978 amendment has made it imperative for the Parliament to review its approval periodically, once every six months.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Back then, while approving the declaration or continuity of an emergency, all that was required was a simple majority of the Parliament &amp;ndash; which is at least half of the members present and voting. Thousands of the Congress&amp;rsquo;s political opponents, including many MPs and the chief rival Jayaprakash Narayan, had already been arrested and sent to jail without trial as was allowed under Emergency provisions then. With their opposition missing from Parliament, the Congress found it easy to manage this rather simple majority. Understandably, the 1978 amendment made the terms of Parliamentary approval stricter by replacing the requirement of a simple majority with that of a &amp;lsquo;special&amp;rsquo; majority. This requires the approval of at least two-thrids of the members present and voting, as well as at least half of the total strength of the Parliament (which includes members who are not present).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Now coming to your third question, that of upliftment. The exact reasons for why Indira Gandhi finally chose to end twenty months of Emergency rule, remain unknown and hence open to wide speculation. Ramachandra Guha&amp;rsquo;s book, India After Gandhi, quotes a few possible explanations for this. That she was confident of being elected back to power in the elections that would follow, that she was competing with the Pakistan President who had declared fresh elections in his own state, that she disliked being cut off from public contact following the emergency, and that she was hurt by criticism targeted at her by independent foreign observers who could not be dismissed off as enemies of the state.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sources&lt;/p&gt;

&lt;p&gt;[1] Chapters 21 (The Rivals) and 22 (Autumn of the Matriarch) from Ramachandra Guha&amp;rsquo;s excellent book, India After Gandhi&lt;/p&gt;

&lt;p&gt;[2] Bihar Movement&lt;/p&gt;

&lt;p&gt;[3] Indian Polity by M. Laxmikanth, for information regarding the Constitution&amp;rsquo;s Emergency provisions, and also the 44th Amendment Act of 1978.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What major issues did India have at the time of its independence that are now resolved?</title>
      <link>http://cdax.github.io/post/india-at-independence/</link>
      <pubDate>Wed, 14 May 2014 00:32:26 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/india-at-independence/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This was originally posted as an answer to the question &lt;a href=&#34;https://www.quora.com/What-major-issues-did-India-have-at-the-time-of-its-independence-that-are-now-resolved&#34;&gt;What major issues did India have at the time of its independence that are now resolved?&lt;/a&gt; on &lt;a href=&#34;https://www.quora.com/&#34;&gt;Quora&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To describe a few that come to mind:&lt;/p&gt;

&lt;h4 id=&#34;resettlement-of-refugees&#34;&gt;Resettlement of refugees&lt;/h4&gt;

&lt;p&gt;When it became clear that Indian independence would come at the cost of partition, people who wished to be part of the Indian dominion migrated in heavy numbers from across the border, leaving their land and property behind in what was to become Pakistan. Much of this migration happened post-independence, and the new government was immediately faced with the challenge of resettling them. Along with a lot of hard work on the part of the administration, a couple of very innovative methods were employed to redistribute land among the refugees in a just and efficient manner (read about the &amp;lsquo;standard acre&amp;rsquo; and the &amp;lsquo;graded cut&amp;rsquo;). Many of the thriving Punjabi-populated colonies in Delhi (Patel Nagar, Lajpat Nagar,&amp;hellip;) were set up during this time, as was the city of Faridabad.&lt;/p&gt;

&lt;h4 id=&#34;integration-of-the-princely-states&#34;&gt;Integration of the Princely states&lt;/h4&gt;

&lt;p&gt;It would be a massive understatement to say that the British left behind just 2 states, India and Pakistan, because in effect they were leaving the new government the mammoth task of integrating over 500 princely states into the union. Chiefly owing to the efforts of Sardar Patel and his secretary VP Menon, many of these states acceded without much need for persuasion, though a few are infamous for having given us trouble. One of these, Kashmir, continues to be a bone of contention to this day.&lt;/p&gt;

&lt;h4 id=&#34;framing-a-constitution&#34;&gt;Framing a Constitution&lt;/h4&gt;

&lt;p&gt;I have often heard people say that the three years that it took to frame the Indian constitution is a mark of inefficiency on the part of the Constituent Assembly, when similar operations in other countries (e.g., Japan) were completed within months. What is overlooked here are two important facts. First, the constitution was drafted entirely by Indians, and was not dictated or handed down to us by another nation (e.g., again, Japan). This in itself should be considered an achievement. And then there&amp;rsquo;s the fact that the sheer diversity among the members of the Constituent Assembly naturally led to near-incessant debates. Looking back, it is hard to believe we managed to do it in just three years!&lt;/p&gt;

&lt;p&gt;In fact, India achieved more in those first few years following independence, than some of the recent coalitions have managed in their five-year terms in office. And to think, all of this was accomplished against the backdrop of rioting, the Kashmir problem, and the task of conducting the first election in independent India.&lt;/p&gt;

&lt;p&gt;There are a few other major examples that are to be found in the pages of our early post-independence history, chief among them being the Green Revolution. This period of history however, remains largely ignored and un-chronicled even by our own historians. Ramachandra Guha&amp;rsquo;s &amp;ldquo;India After Gandhi&amp;rdquo; would be a good starting point for anybody who&amp;rsquo;s interested.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why is Ashoka Maurya given the title of &#39;Great&#39;?</title>
      <link>http://cdax.github.io/post/ashoka-the-great/</link>
      <pubDate>Wed, 16 Oct 2013 00:27:50 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/ashoka-the-great/</guid>
      <description>&lt;p&gt;&lt;em&gt;This was originally posted as an answer to the question &lt;a href=&#34;https://www.quora.com/Why-is-Ashoka-Maurya-given-the-title-of-Great&#34;&gt;Why is Ashoka Maurya given the title of &amp;lsquo;Great&amp;rsquo;?&lt;/a&gt; on &lt;a href=&#34;https://www.quora.com/&#34;&gt;Quora&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In India under Ashoka, we witness the successful culmination of an ambitious first experiment in empire-building. Much has been written about the aggression and cruelty that marked his reign prior to his conversion to Buddhism, and how this conversion was to play a silent role in the subsequent decline of the Mauryan empire.&lt;/p&gt;

&lt;p&gt;These contentious issues apart, my personal belief is that Ashoka should forever be remembered for trying to persuade his subjects to adopt Dhamma, a social ethic that tried to unite them by invoking virtues of tolerance and respect for human dignity.&lt;/p&gt;

&lt;p&gt;At the time, Mauryan society had visible divisions based on caste, regional and ideological differences. Ever since its inception in the mid-second millenium BC, Caste had been (and continues to be) a permanent fixture of Indian society. A number of unorthodox new sects including Buddhism and Jainism that flourished under Mauryan rule, did not endorse the caste system. None of them managed to eradicate it however. On the other hand, they ended up inviting strong disapproval from communities practising Vedic Brahmanism, an early form of Hinduism that was prominent at the time. Moreover, the vast Mauryan empire consisted of a number of culturally disjoint regions, from the former Greek territories in the north-west, to Kalinga in the south-east.&lt;/p&gt;

&lt;p&gt;It was as a response to these differences that Ashoka formulated his policy of Dhamma, which professed among other things:
- an equal respect for the sects and a plea for practicing tolerance, as also to respect one&amp;rsquo;s elders
- the uselessness of ritual ceremonies and animal sacrifice
- the need for non-violent conquest by Dhamma, as opposed to conquest by war&lt;/p&gt;

&lt;p&gt;It is another matter entirely that Ashoka received little success with the implementation of his policies. What matters is that unlike many rulers who came after him, he tried and that his attempt marks a rare effort in the direction of establishing unity in the subcontinent.&lt;/p&gt;

&lt;p&gt;Moreover, the manner in which he communicated these ideas to his subjects &amp;ndash; through a number of rock and pillar inscriptions that were read out to them by literate locals on his behalf &amp;ndash; was quite a direct form of public address which was rarely ever practiced after his death. For me, his greatness lies in the fact that using Dhamma, he tried to set an example for future generations of rulers. An example that, to this day remains largely ignored and forgotten.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What was pre-Aryan india like?</title>
      <link>http://cdax.github.io/post/pre-aryan-india/</link>
      <pubDate>Tue, 08 Oct 2013 00:23:32 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/pre-aryan-india/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This was originally posted as an answer to the question &lt;a href=&#34;https://www.quora.com/What-was-pre-Aryan-india-like&#34;&gt;What was pre-Aryan india like?&lt;/a&gt; on &lt;a href=&#34;https://www.quora.com/&#34;&gt;Quora&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Your question called for looking at pre-Aryan India from the following multiple perspectives:&lt;/p&gt;

&lt;h4 id=&#34;habitation&#34;&gt;Habitation&lt;/h4&gt;

&lt;p&gt;A mountain of evidence unearthed by archaeologists over the years shows us that India was certainly not uninhabited before the coming of the Indo-Aryan speaking people (the &amp;ldquo;Aryans&amp;rdquo;) in around 1,500 BC. In fact, a first wave of urbanization had already swept past north-western and western India, long before the Aryans started setting up towns and cities in the Ganges Plain. The people of the Indus Valley (Harappan) Civilization are remembered for an advanced sense of civic planning, a far-reaching trade network, and for being one of the largest civilizations of the time (2,600 to 1,800 BC). But even the Harappans appear many hundreds of years down the line if one is to look at a history of human habitation in India. The earliest sites date back to about 30,000-10,000 BC. These include the rock shelters at Bhimbetka in Madhya Pradesh and the Sanghao caves in Pakistan. Evidence of developing human settlements in the long interim between this early era (the Paleolithic) and the Harappans, lies dotted all over the subcontinent, ranging from Ghalegay in the Swat Valley to the Edakkal caves in Kerala.&lt;/p&gt;

&lt;h4 id=&#34;geography&#34;&gt;Geography&lt;/h4&gt;

&lt;p&gt;Since the Aryans are known to have cleared vast patches of forest lands in the Ganges Plain in order to fuel their widespread agricultural enterprise, it is probable that this part of India would have been more densely forested in earlier times. However, the landscapes of India&amp;rsquo;s other major geographical features &amp;ndash; the Northern Mountains, the Peninsula and the Coasts &amp;ndash; are likely to have suffered minimal changes as a result of Aryan activity.&lt;/p&gt;

&lt;p&gt;Hence, jungles weren&amp;rsquo;t everywhere, but a lot of forest cover was indeed cleared by the Aryans before they ushered in the second wave of urbanization in India.&lt;/p&gt;

&lt;h4 id=&#34;society&#34;&gt;Society&lt;/h4&gt;

&lt;p&gt;Caste-based division of society has its earliest mention mostly in the Vedas which, along with other textual sources like the Puranas, the Ramayana and the Mahabharata, have been used by historians to draw a number of insights into Aryan social life.&lt;/p&gt;

&lt;p&gt;However, the Indus Valley Civilization that came prior to the Aryans, is unlikely to have witnessed a perfectly egalitarian society. The elaborate city plans and construction projects seen at major Harappan sites, hint to the possibility that a significant labour force was involved. The control and management of this kind of labour would have served as a source of power and authority. Evidence of a system of social stratification as elaborate and well-established as Caste, is nevertheless absent before the arrival of the Aryans.&lt;/p&gt;

&lt;h4 id=&#34;legacy&#34;&gt;Legacy&lt;/h4&gt;

&lt;p&gt;A number of cults and practices that originated in pre-Aryan India were adapted, re-adapted and exported to other cultures by subsequent settlers and are visible even today &amp;ndash; these include the deity Shiva, goddess worship and phallic worship, and possibly fire worship and sacrifice as well. However, I am yet to learn about entire tribes that have survived largely unchanged from that era.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Kasol Affair</title>
      <link>http://cdax.github.io/post/kasol/</link>
      <pubDate>Wed, 13 Feb 2013 22:46:27 +0530</pubDate>
      
      <guid>http://cdax.github.io/post/kasol/</guid>
      <description>

&lt;p&gt;It’s been four months since my first trip to &lt;a href=&#34;http://en.wikipedia.org/wiki/Kasol&#34;&gt;Kasol&lt;/a&gt;. Looking back, I don’t regret not having kept an account of how I spent my time there. There’s a certain infectious quality about the relaxed air at Kasol. Once you’re there, enjoy the cool weather, eat the good food, live at the cheap hotels and meet the strange people. Of course there’s a lot else to do, but keeping a journal of my adventures was never a priority.&lt;/p&gt;

&lt;p&gt;Nevertheless, while listening to an &lt;a href=&#34;http://www.youtube.com/watch?v=3uTzfhqdcn8&#34;&gt;Altaf Raja classic&lt;/a&gt; at work today, I finally chose to put something down out of sheer nostalgia (they listen to a lot of Altaf Raja up in the hills of Himachal Pradesh). I don’t intend to write a guide for someone already planning to backpack up to Kasol; there are many reliable travel guides out there. However, I do hope to get someone curious about places they may have never known to exist.&lt;/p&gt;

&lt;h4 id=&#34;getting-there&#34;&gt;Getting There&lt;/h4&gt;

&lt;p&gt;Not many trains dare to ply over the Himalayan terrain, but the small town of Bhuntar, being in proximity to popular tourist destinations like Kasol, Kullu and Manali, boasts the luxury of &lt;a href=&#34;http://en.wikipedia.org/wiki/Bhuntar_Airport&#34;&gt;a domestic airport&lt;/a&gt;. The Bhuntar Airport, erected on the west bank of the Beas river, is quite a sight but recent withdrawal of services by debt-ridden carriers Air India and Kingfisher have meant that it has been in-operational for a while. Ground staff sit around killing their time, even while people in search of a public toilet relieve themselves in a hidden corner of the Airport complex.&lt;/p&gt;

&lt;p&gt;Just a kilometer or two away from this airport however, is the fully-functional Bhuntar bus depot. Buses arrive from most major North Indian towns, and it’s a twelve-hour journey from New Delhi’s ISBT Kashmere Gate in particular. You can book a seat in one of the inimitable Volvo buses for anywhere between Rs. 700 to 1000. As a note of caution, be very careful when selecting your bus at Kashmere Gate. Never trust hawkers who will offer you a cheap price by splitting your journey into two bus rides — this will usually end up with you getting stranded in an unknown town.&lt;/p&gt;

&lt;p&gt;Once you’ve reached Bhuntar, the first thing to do is to make sure you draw out enough cash to sustain your stay in Kasol because up in the Parvati Valley, banks, ATMs and the police do not exist. After that, hitch a bus to Kasol, which is still a good 30 kilometers off and get set for the bus ride of your life — the vehicle plies chillingly close to the edges of Manikaran Road, that winds its way around mountains. Each bend in the road offers its own thrills. It’s incredible how two buses heading in opposite directions on the same narrow strip with a bottomless fall on one side, still manage to breeze past each other quite peacefully. In the two and a half hours that it takes to get to Kasol, the bus usually makes no more than two stops at nondescript settlements along the road.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://cdax.github.io/img/kasol-growth.jpg&#34; alt=&#34;Cannabis growing wild in Kasol&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I personally feel that if you’ve got the time and the legs for it, then trekking those 30 kilometers to Kasol is the best way to get there. The picturesque landscape is dotted with apple orchards and a variety of birds, and Kasol announces itself with a sudden overgrowth of wild Cannabis (called Bhang by the locals, just in case you want to ask someone where to find some).&lt;/p&gt;

&lt;h4 id=&#34;staying-there&#34;&gt;Staying There&lt;/h4&gt;

&lt;p&gt;When the bus finally dropped me off at Kasol, I wasn’t concerned about immediately finding a place to stay, but I took some time to walk around and soak in the sudden change in sights and sounds. On either side of the main road were restaurants, cafes and bakeries — many of them had their names written in Hebrew. Over the years, a lot of Israelis have made Kasol their home, and it’s not difficult to see why. I walked into one peculiar looking shack, attracted by the sound of music playing inside it, but all I found was a deserted kitchen and empty chairs and tables. An unattended laptop computer played songs in a loop from a playlist. This is how I found this place both nights during my stay in Kasol — deserted, with music playing on a computer and an empty kitchen.&lt;/p&gt;

&lt;p&gt;There is an abundance of inns and cyber cafes, travel agencies and handicraft shops. At the cyber cafes, I saw tourists talking to their families and friends back home over Facebook and Skype. While the owners of shops greeted me with suspicious looks, almost every foreigner carried a telling smile on his/her face. In places, the air smelled of burnt grass, and you knew that these smiles came from perpetual bliss supplemented with good, cheap food. A small bridge passing over the river Parvati offered an unimaginably scenic spot for visitors to hang out and smoke together in peace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://cdax.github.io/img/moondance-cafe-view.jpg&#34; alt=&#34;The view from Moondance Cafe&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I stayed at &lt;em&gt;Hotel Kasol Inn&lt;/em&gt;, which offered a decent room with a double bed for just Rs. 300 per night. However, that much money gives you just one sheet and one blanket with which you must face the cold air of the valley. So it’s a good idea to carry your own quilts or blankets. The inn-keeper, though he seemed to be charging an extra Rs. 100 off dating/married couples, was a friendly man. He offered us some of his prized hash at an alleged discount, even before we (my flatmate and I) had checked into our rooms — or perhaps that was a marketing tactic. Outside Kasol Inn, we met a man who had probably one day just decided to abandon his life in his home town or city, and settle in Kasol. He made a living as a tattoo artist who was also a part-time t-shirt print designer.&lt;/p&gt;

&lt;h4 id=&#34;eating-there&#34;&gt;Eating There&lt;/h4&gt;

&lt;p&gt;I had caught a cold on my way from Bhuntar to Kasol, so after checking in, I set about looking for some warm soup. I entered a small shack owned by two Sikkhimese women. Their only other patron at the time was a man who spoke in Spanish, entertained a stray dog and flirted off-handedly with the younger of the two women. I ordered half a bowl of Thukpa, and some Momos. All of this cost me just Rs. 30. Thukpa is Sikkimese noodle soup prepared with an array of chopped vegetables, served piping hot. It helped my cold.&lt;/p&gt;

&lt;p&gt;The next morning I walked over to Moondance Cafe, which is a local favourite. Laid out seductively on a rack in their bakery, I saw a range of breads and cakes. And then there were breads and cakes that came stuffed with, and covered in that unearthly God-sauce, Nutella. Nowhere else have I seen everyday food tailored so beautifully to delight hungry people. People at Kasol were observed to be a whole lot hungrier than is normal. From Moondance I had a baguette, a spanish omelette, a coffee and a muffin and the cashier had my bill made out for a little over Rs. 50.&lt;/p&gt;

&lt;p&gt;The only other place I ate at during my stay — three places in twenty four hours is the best I could manage — was Bhoj Restaurant. They boasted a Specials menu, great music and an ambience that was even more chilled out than outside. I chose to have some lasagna, which didn’t turn out as well as I’d imagined. There are quite a few other places that I missed out on, most notably the cleverly named Wunder Bar, Little Italy, and that deserted kitchen that seemed to have an acute shortage of staff.&lt;/p&gt;

&lt;h4 id=&#34;what-to-do-there&#34;&gt;What to do There&lt;/h4&gt;

&lt;p&gt;I heard people like to trek and go white water rafting in and around Kasol. But when you’re short on time and forced to prioritize, choose the one most rewarding activity. Walk about, look around and take a hint.&lt;/p&gt;

&lt;h4 id=&#34;getting-back&#34;&gt;Getting Back&lt;/h4&gt;

&lt;p&gt;Getting back from Kasol is easy thanks to the many travel agents in the area. If you try to pay them plastic money however, they’ll charge you an extra Rs. 100, stating that they’ll have to travel to the nearest bank, which lies 30 kilometers away. Book a ticket from Bhuntar’s bus depot to wherever you’re headed next, and to get to Bhuntar, stop any bus on its way there from Manikaran.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://cdax.github.io/img/kasol-parvati.jpg&#34; alt=&#34;The Parvati River, flowing through Kasol&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I’m far from finished with Kasol. I’ll be back there a few more times later in life. To a land frozen in time, where people will still be grooving to the tunes of Altaf Raja.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>